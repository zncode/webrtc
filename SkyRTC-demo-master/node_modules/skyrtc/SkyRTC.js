var WebSocketServer = require('ws').Server;
var UUID = require('node-uuid');
var events = require('events');
var util = require('util');
var request = require("request");

var errorCb = function(rtc) {
    return function(error) {
        if (error) {
            rtc.emit("error", error);
        }
    };
};

function SkyRTC() {
    this.sockets = [];
    this.rooms = {};
    this.users = {};

    //用户注册到服务器
    this.on('__register', function(data, socket) {
        //记录用户userid
        sSessionValue = data.from;

        //socket.uid = data.from;

        //get token and sessionValue
        // var token = data.token;
        // var sessionValue = null;

        //var url = "http://realusionapi.87vr.com/session_info.php?id=05ju0eda2d09ogukbvf6igg3s6";
        var url = "http://realusionapi.87vr.com/session_info.php?id=" + sSessionValue;
        request(
                {
                    method: 'GET',
                    uri: url,
                },
                function(error, response, body){
                    //    console.log('server encoded the data as: ' + (response.headers['content-encoding'] || 'identity'));
                      //  console.log('the decoded data is: '+body);
                }
               ).on('data', function(data){
            var userInfo = JSON.parse(data);
            if(userInfo.result.code == "000")
            {
                socket.uid = userInfo.info.gr_member_idx;
                console.log('member idx : ' + userInfo.info.gr_member_idx);
            }
            else
            {
                console.log('no data!');
            }
        });
        
        //socket.session_id = data.session_id;

        //if(data.session_id != '12345')
        //{
        //    console.log( "Session id not correct! " + socket.session_id);
        //    this.removeSocket(socket);
        //    return false;
        //}
        //判断user是否存在?
        this.users[data.from] = socket;

        //返回自己的标识socketid
        socket.send(JSON.stringify({
            "eventName": "__register",
            "data": {
                "code": 200,
                "you": socket.id
            }
        }), errorCb);

        this.emit('register', socket, data);
    });
    //取得在线用户列表
    this.on('__get_contacts', function(data, socket) {
        var i,
        curSocket,
        users = [];

        for (i = this.sockets.length; i--;) {
            if( socket.uid === this.sockets[i].uid ) {
                continue;
            }
            users.push(this.sockets[i].uid);
        }

        //返回自己的标识socketid
        socket.send(JSON.stringify({
            "eventName": "__get_contacts",
            "data": {
                "users": users
            }
        }), errorCb);
        console.log("取得在线用户__get_contacts:" + users );
    });
    //创建聊天室/邀请加入
    this.on('__invite', function(data, socket) {

        var ids = [],
        i, j, findFlag,
            room = data.room,
            curUid,
                curRoom,
                curSocket;

        if("chatroom" == room) {
            //房间里添加创建者
            room = (new Date().getTime()) ^ Math.random();
            curRoom = this.rooms[room] = [];
            socket.room = room;
            curRoom.push(socket);
        } else {
            curRoom = this.rooms[room];
            if( !curRoom ) {
                console.log( room + " 不存在 erro!" );
                return;
            }
        }		
        console.log( room + " 聊天室目前人数:" + this.rooms[room].length );
        //返回房间信息
        socket.send(JSON.stringify({
            "eventName": "__invite",
            "data": {
                "code": 200,
                "room": room,
            }
        }), errorCb);

        var room_users = [];
        //统计房间里所有人
        for (i = 0; i < curRoom.length; i++ ) {
            curSocket = curRoom[i];
            room_users.push(curSocket.uid);
        }		

        //邀请其他人加入
        for (i = 0; i < data.to.length; i++) {

            curUid = data.to[i];
            curSocket = this.users[curUid];
            console.log(  "邀请人数:" + data.to.length + " uid:" + curUid + " 顺序："  + i );
            //检查用户是否在线
            if( !curSocket ) {
                console.log("该用户不在线:" + curUid );
                continue;
            }

            //检查是否重复邀请
            findFlag = false;
            for (j = 0; j < curRoom.length; j++) {
                if (curRoom[j].uid === curSocket.uid) {
                    findFlag = true;
                    console.log(  "用户已经在聊天室里:" + curRoom[j].uid + " 房间号:" + room );
                    break;
                }
            }
            if( findFlag ){
                continue;
            }
            console.log( "统计房间里所有人:" + room_users );

            curSocket.send(JSON.stringify({
                "eventName": "_invite",
                "data": {
                    "from": socket.uid,
                    "type": data.type,
                    "room": room,
                    "connections": room_users,
                    "group": data.group
                }
            }), errorCb);
        }		

        this.emit('invite', socket, data);
    });

    //主动加入聊天室处理
    this.on('__join', function(data, socket) {

        var ids = [],
        i, m,
            room = data.room ,
            curSocket,
                curRoom;
        //查找此房间
        curRoom = this.rooms[room];
        if( !curRoom ) {
            //返回房间信息
            socket.send(JSON.stringify({
                "eventName": "__join",
                "data": {
                    "code": 404,
                }
            }), errorCb);
            return;
        }

        console.log("聊天室目前人数:" + curRoom.length );
        //通知房间里的其他人 有新人加入
        for (i = 0, m = curRoom.length; i < m; i++) {
            curSocket = curRoom[i];
            if (curSocket.id === socket.id) {
                continue;
            }
            ids.push(curSocket.uid);

            curSocket.send(JSON.stringify({
                "eventName": "_new_peer",
                "data": {
                    "from": socket.uid,
                    "room": room
                }
            }), errorCb);
            console.log( "发送_new_peer消息:" + JSON.stringify({
                "eventName": "_new_peer",
                "data": {
                    "from": socket.uid,
                    "room": room
                }
            }) );

        }

        //房间里添加新用户
        curRoom.push(socket);
        //记录用户所属房间
        socket.room = room;	

        //返回房间信息
        socket.send(JSON.stringify({
            "eventName": "_peers",
            "data": {
                "connections": ids,
            }
        }), errorCb);
        console.log( "发送_peers消息:" + JSON.stringify({
            "eventName": "_peers",
            "data": {
                "connections": ids,
            }
        }) );
        this.emit('new_peer', socket, room);
    });

    //转发candidate
    this.on('__ice_candidate', function(data, socket) {
        var soc = this.users[data.to];

        if (soc) {
            soc.send(JSON.stringify({
                "eventName": "_ice_candidate",
                "data": {
                    "label": data.label,
                    "candidate": data.candidate,
                    "id": data.id,
                    "from": socket.uid
                }
            }), errorCb);

            this.emit('ice_candidate', socket, data);
        }
    });
    //转发主叫端sdp
    this.on('__offer', function(data, socket) {
        var soc = this.users[data.to];

        if (soc) {
            soc.send(JSON.stringify({
                "eventName": "_offer",
                "data": {
                    "sdp": data.sdp,
                    "from": socket.uid
                }
            }), errorCb);
        }

        this.emit('offer', socket, data);
    });

    //转发被叫端sdp的回复
    this.on('__answer', function(data, socket) {
        var soc = this.users[data.to];
        if (soc) {
            soc.send(JSON.stringify({
                "eventName": "_answer",
                "data": {
                    "sdp": data.sdp,
                    "from": socket.uid
                }
            }), errorCb);

            this.emit('answer', socket, data);
        }
    });
    //取消呼叫
    this.on('__cancel', function(data, socket) {
        var soc = this.users[data.to];
        if (soc) {
            soc.send(JSON.stringify({
                "eventName": "_cancel",
                "data": {
                    "room": data.room || "",
                    "from": socket.uid
                }
            }), errorCb);
        }
    });
    //拒绝接通
    this.on('__refuse', function(data, socket) {
        var soc = this.users[data.to];
        if (soc) {
            soc.send(JSON.stringify({
                "eventName": "_refuse",
                "data": {
                    "room": data.room || "",
                    "from": socket.uid
                }
            }), errorCb);
        }
    });


    //退出聊天处理
    this.on('__bye', function(data, socket)  {
        var i, m,
        room = data.room,
        curRoom;
        if (room) {
            curRoom = this.rooms[room];
            //给聊天室其他成员发通知
            if(!curRoom) {
                console.log( "该聊天室不存在:" + room );
                return;
            }
            for (i = curRoom.length; i--;) {
                if (curRoom[i].uid === socket.uid && "active" === data.action ) {
                    continue;
                }
                curRoom[i].send(JSON.stringify({
                    "eventName": "_bye_peer",
                    "data": {
                        "room": data.room || "",
                        "action": data.action || "",
                        "to": data.to || "",
                        "from": socket.uid
                    }
                }), errorCb);
                console.log( "发送bye:" + curRoom[i].uid );
            }				
            //从聊天室里删除
            i = this.rooms[room].indexOf(socket);
            this.rooms[room].splice(i, 1);
            if (this.rooms[room].length === 0) {
                console.log( "删除聊天室:" + room );
                delete this.rooms[room];
            }
            socket.room = "";

            this.emit('bye', socket);
        }
    });

    //转发即时消息
    this.on('__msg', function(data, socket) {
        var soc = this.users[data.to];
        if (soc) {
            soc.send(JSON.stringify({
                "eventName": "_msg",
                "data": {
                    "message": data.message,
                    "from": data.from,
                    "to": data.to
                }
            }), errorCb);
            console.log( "收到普通消息:" + JSON.stringify(data) );
            this.emit('socket_message', socket, data.message);
        }
    });

}

util.inherits(SkyRTC, events.EventEmitter);

SkyRTC.prototype.addSocket = function(socket) {
    this.sockets.push(socket);
};

SkyRTC.prototype.removeSocket = function(socket) {
    var i = this.sockets.indexOf(socket),
    room = socket.room;
    //删除sockets信息
    this.sockets.splice(i, 1);
    //删除相关房间信息
    if (room) {
        if(!this.rooms[room]) {
            console.log( "聊天室已经不存在:" + room );
            return;
        }
        i = this.rooms[room].indexOf(socket);
        this.rooms[room].splice(i, 1);
        if (this.rooms[room].length === 0) {
            console.log( "删除聊天室:" + room );
            delete this.rooms[room];
        }
    }
};

SkyRTC.prototype.broadcast = function(data, errorCb) {
    var i;
    for (i = this.sockets.length; i--;) {
        this.sockets[i].send(data, errorCb);
    }
};

SkyRTC.prototype.broadcastInRoom = function(room, data, errorCb) {
    var curRoom = this.rooms[room],
    i;
    if (curRoom) {
        for (i = curRoom.length; i--;) {
            curRoom[i].send(data, errorCb);
        }
    }
    console.log( "广播broadcastInRoom:" + rooms );
};

SkyRTC.prototype.getRooms = function() {
    var rooms = [],
    room;
    for (room in this.rooms) {
        rooms.push(room);
    }
    console.log( "取房间getRooms:" + rooms );
    return rooms;
};

SkyRTC.prototype.getSocket = function(id) {
    var i,
    curSocket;
    if (!this.sockets) {
        return;
    }
    for (i = this.sockets.length; i--;) {
        curSocket = this.sockets[i];
        if (id === curSocket.id) {
            return curSocket;
        }
    }
    return;
};

SkyRTC.prototype.init = function(socket) {
    var that = this;
    socket.id = UUID.v4();
    that.addSocket(socket);
    //为新连接绑定事件处理器
    socket.on('message', function(data) {
        var json = JSON.parse(data);
        if (json.eventName) {
            console.log( "绑定事件处理器1:" + json.eventName + ":" + JSON.stringify(data) );
            that.emit(json.eventName, json.data, socket);
        } else {
            //console.log( "绑定事件处理器2:" + json.eventName + ":" + JSON.stringify(data) );
            that.emit("socket_message", socket, data);
        }
    });
    //连接关闭后从SkyRTC实例中移除连接，并通知其他连接
    socket.on('close', function() {
        var i, m,
        room = socket.room,
        curRoom;
        if (room) {
            curRoom = that.rooms[room];
            console.log( "socketclose 清理残留数据:" + room + " 用户:" + socket.uid );
            if( curRoom) {
                for (i = curRoom.length; i--;) {
                    if (curRoom[i].uid === socket.uid) {
                        continue;
                    }
                    curRoom[i].send(JSON.stringify({
                        "eventName": "_remove_peer",
                        "data": {
                            "from": socket.uid
                        }
                    }), errorCb);
                    console.log( "向同房间用户发送关闭通知:" + room + " 用户:" + curRoom[i].uid);
                }
            }
        }

        that.removeSocket(socket);
        socket.close();

        that.emit('remove_peer', socket );
    });
    that.emit('new_connect', socket);
};

module.exports.listen = function(server) {

    var SkyRTCServer;
    if (typeof server === 'number') {
        SkyRTCServer = new WebSocketServer({
            port: server
        });
    } else {
        SkyRTCServer = new WebSocketServer({
            server: server
        });
    }

    SkyRTCServer.rtc = new SkyRTC();
    errorCb = errorCb(SkyRTCServer.rtc);
    SkyRTCServer.on('connection', function(socket) {
        this.rtc.init(socket);
    });

    return SkyRTCServer;
};
